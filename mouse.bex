	option explicit
	option title, "MOUSE TEST"
	;asm code adapted from https://plutiedev.com/
	
	DIM MOUSEBUFFER AS INTEGER
	DIM MOUSEBUFFER1 AS INTEGER
	DIM MOUSEBUFFER2 AS INTEGER
	DIM MOUSEBUFFER3 AS INTEGER
	DIM MOUSEBUFFER4 AS INTEGER
	DIM MOUSEBUFFER5 AS INTEGER
	DIM MOUSEBUFFER6 AS INTEGER
	DIM MOUSEBUFFER7 AS INTEGER
	DIM MOUSEBUFFER8 AS INTEGER
	DIM MOUSEBUFFER9 AS INTEGER
	
	DIM RES AS INTEGER
	DIM TIME AS INTEGER
	DIM X AS INTEGER
	DIM Y AS INTEGER
	DIM DX AS INTEGER
	DIM DY AS INTEGER 
	DIM XS AS INTEGER
	DIM YS AS INTEGER
	DIM XH AS INTEGER
	DIM XL AS INTEGER
	DIM YH AS INTEGER 
	DIM YL AS INTEGER
	DIM FLAGS AS INTEGER
	DIM SPRITE AS INTEGER
	
	asm
IoCtrl1: equ $A10009   ; 1P control port
IoCtrl2: equ $A1000B   ; 2P control port
IoData1: equ $A10003   ; 1P data port
IoData2: equ $A10005   ; 2P data port
		
Z80Ram:     equ $A00000  ; Where Z80 RAM starts
Z80BusReq:  equ $A11100  ; Z80 bus request line
Z80Reset:   equ $A11200  ; Z80 reset line

FastPauseZ80: macro
    move.w  #$100, (Z80BusReq)
    endm
    
ResumeZ80: macro
    move.w  #$000, (Z80BusReq)
    endm		
		
	FastPauseZ80
	move.b  #$60, (IoCtrl1)
	move.b  #$60, (IoData1)
	ResumeZ80
    end asm 
    
    SPRITE=addsprite(1,1)
    propsprite SPRITE,1,1
    
    
MAIN:
	RES = CALL(READMOUSE)
	FLAGS = PEEK(VARPTR&(MOUSEBUFFER)+3)	
	XH = PEEK(VARPTR&(MOUSEBUFFER)+5)
	XL = PEEK(VARPTR&(MOUSEBUFFER)+6)
	YH = PEEK(VARPTR&(MOUSEBUFFER)+7)
	YL = PEEK(VARPTR&(MOUSEBUFFER)+8)
	DX = (XH << 4) + XL
	DY = (YH << 4) + YL
	
	'REGMOVE.W DX,d0
	'REGMOVE.W DY,d1
	'REGMOVE.W FLAGS, d2
	'RES = CALL(SIGNEXTEND)
	'REGMOVE.W d0,DX
	'REGMOVE.W d1,DY
	
	'IF FLAGS.1 > 0 THEN DY = NOT(DY)
	
	IF FLAGS.0 THEN 
		REGMOVE.W DX,d0
		'RES = CALL(NEGATE)
		asm
				and.w   #$FF, d0
				neg.b   d0
			    neg.w   d0
    	end asm
		REGMOVE.W d0,DX
	ENDIF 
	IF FLAGS.1 THEN 
		REGMOVE.W DY,d0
		'RES = CALL(NEGATE)
		asm
			and.w   #$FF, d0
			neg.b   d0
    		neg.w   d0
		end asm
		REGMOVE.W d0,DY
	ENDIF
	
	X = X + DX
	Y = Y - DY
	
	IF X > 444 THEN X = 444 ELSE IF X < 125 THEN X = 125
	IF Y > 344 THEN Y = 344 ELSE IF Y < 125 THEN Y = 125
	
	
	
	TIME = TIME + 1	
	SLEEP 0,TVBLANK
	CLS
	PRINT "=MOUSE TEST="
	PRINT ""
	PRINT "RC:",RES
	PRINT "ID:",PEEK(VARPTR&(MOUSEBUFFER))
	PRINT "XH:",RIGHT$(HEX$(XH),1)
	PRINT "XL:",RIGHT$(HEX$(XL),1)
	PRINT "YH:",RIGHT$(HEX$(YH),1)
	PRINT "YL:",RIGHT$(HEX$(YL),1)
	PRINT "DX:",RIGHT$(HEX$(DX),4)
	PRINT "DY:",RIGHT$(HEX$(DY),4)
	PRINT "BUTTONS:",RIGHT$(BIN$(PEEK(VARPTR&(MOUSEBUFFER)+4)),4)
	PRINT "FLAGS:",RIGHT$(BIN$(FLAGS),4)
	PRINT "X:",X
	PRINT "Y:",Y
	MOVESPRITE SPRITE,X,Y
	
	GOTO MAIN
	
	asm
; Reads a mouse packet
; d0.w = 0 on success
;       -1 on failure

ReadMouse:
    ; I/O data port to read from
    ; Use IoData2 for player 2
    lea     (IoData1), a0
    
    ; Buffer to store the nibbles
    ; (we use up one byte per nibble)
    lea     (__INTEGER_MouseBuffer), a1
    
    ; Look-up table, see below
    lea     (@Table), a2
    
    ; Keep Z80 out of the 68000 bus
    FastPauseZ80
    
    ; Now loop through all nibbles
    ; (the -1 is because of DBF)
    moveq   #9-1, d0
@Loop:
    
    ; Tell mouse to send next nibble
    ; and wait for it to be ready if
    ; it takes too long we bail out
    move.b  (a2)+, (a0)
    move.w  #$FF, d7
@Wait:
    moveq   #$10, d6    ; Mask out bit 4 and
    and.b   (a0), d6    ; check if it matches
    cmp.b   (a2), d6    ; what we want
    beq.s   @GotIt
    
    dbf     d7, @Wait   ; Keep waiting if not,
    bra     @Error      ; or throw error if we
                        ; waited way too long
    
    ; Got the nibble, store it into a
    ; buffer and move onto the next one
@GotIt:
    moveq   #$0F, d6    ; Mask out the nibble
    and.b   (a0), d6    ; and store it into
    move.b  d6, (a1)+   ; the buffer
    
    lea     1(a2), a2   ; Advance look-up table
    dbf     d0, @Loop   ; Keep looping
    
    move.b  #$60, (a0) ; Leave mouse alone
    ResumeZ80           ; Let Z80 continue
    moveq   #0, d0      ; Success!
    rts                 ; End of subroutine
    
@Error:
    move.b  #$60, (a0)  ; Reset mouse just in case
    ResumeZ80           ; Let Z80 continue
    moveq   #-1, d0     ; Failure...
    rts                 ; End of subroutine

; Look-up table used in the loop above
; 1st byte is what to write, 2nd byte is
; what to wait for (in bit 4)
@Table:
    dc.b    $20,$10   ; 1st nibble
    dc.b    $00,$00   ; 2nd nibble
    dc.b    $20,$10   ; 3rd nibble
    dc.b    $00,$00   ; 4th nibble
    dc.b    $20,$10   ; 5th nibble
    dc.b    $00,$00   ; 6th nibble
    dc.b    $20,$10   ; 7th nibble
    dc.b    $00,$00   ; 8th nibble
    dc.b    $20,$10   ; 9th nibble

Negate:
	and.w   #$FF, d0
	neg.b   d0
    neg.w   d0
	rts

SignExtend:
	; d0.w = X coordinate (6th-7th nibbles)
	; d1.w = Y coordinate (8th-9th nibbles)
	; d2.b = flags (4th nibble)

    ; If you didn't already, make sure
    ; the coordinates are word-sized
    and.w   #$FF, d0
    and.w   #$FF, d1
    
    ; The code below uses a double NEG
    ; to ensure only values that aren't
    ; 0 are sign extended when it's 0
    ; then it leaves it as 0
    
    ; Check if X is negative
    btst    #0, d2
    beq.s   @PositiveX
    neg.b   d0
    neg.w   d0
@PositiveX:
    
    ; Check if Y is negative
    btst    #1, d2
    beq.s   @PositiveY
    neg.b   d1
    neg.w   d1
@PositiveY:	
	rts
	end asm
